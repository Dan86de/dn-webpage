---
import { Image, getImage } from "astro:assets";

export interface Props {
  lightSrc: ImageMetadata;
  darkSrc: ImageMetadata;
  alt: string;
  class?: string;
  width?: number;
  height?: number;
  eager?: boolean; // for critical images above the fold
}

const {
  lightSrc,
  darkSrc,
  alt,
  class: className,
  width,
  height,
  eager = false,
} = Astro.props;

// Generate optimized images for both themes
const lightImage = await getImage({
  src: lightSrc,
  width,
  height,
  format: "webp",
});
const darkImage = await getImage({
  src: darkSrc,
  width,
  height,
  format: "webp",
});

const id = `theme-img-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  class="theme-image-wrapper"
  data-light={lightImage.src}
  data-dark={darkImage.src}
  data-image-id={id}
>
  <img
    id={id}
    src={lightImage.src}
    alt={alt}
    width={width || lightImage.attributes.width}
    height={height || lightImage.attributes.height}
    class={className}
    loading={eager ? "eager" : "lazy"}
    decoding={eager ? "sync" : "async"}
  />
</div>

<script is:inline>
  // This needs to run immediately to catch the initial theme
  (function () {
    function updateThemedImages() {
      const wrappers = document.querySelectorAll(
        ".theme-image-wrapper[data-light][data-dark]",
      );

      wrappers.forEach((wrapper) => {
        const img = wrapper.querySelector("img");
        if (!img) return;

        const isDark = document.documentElement.classList.contains("dark");
        const newSrc = isDark
          ? wrapper.getAttribute("data-dark")
          : wrapper.getAttribute("data-light");

        console.log("Theme update:", {
          isDark,
          currentSrc: img.src,
          newSrc,
          darkClass: document.documentElement.classList.contains("dark"),
        });

        if (newSrc) {
          img.src = newSrc;
        }
      });
    }

    // Run immediately when script loads
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", updateThemedImages);
    } else {
      updateThemedImages();
    }

    // Watch for theme changes
    const observer = new MutationObserver((mutations) => {
      console.log(
        "Theme class changed!",
        document.documentElement.classList.contains("dark"),
      );
      updateThemedImages();
    });

    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });

    // Also listen for Astro navigation
    document.addEventListener("astro:page-load", updateThemedImages);

    // Cleanup on navigation
    document.addEventListener(
      "astro:before-swap",
      () => {
        observer.disconnect();
      },
      { once: true },
    );
  })();
</script>

<style>
  .theme-image-wrapper {
    display: contents;
  }
</style>
